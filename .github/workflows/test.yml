name: Go CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      ENV: "test"
      LOG_LEVEL: "info"
      CI: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Tidy
        run: go mod tidy

      - name: Run unit tests with coverage
        run: |
          go test ./... -tags='' -covermode=atomic -coverpkg=./... -coverprofile=coverage.out
          go tool cover -func=coverage.out | tee coverage.txt
          go tool cover -html=coverage.out -o coverage.html

      # ✅ Subir reporte a Coveralls
      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.out
          flag-name: unittests
          parallel: false

      # ✅ Validar cobertura mínima (60%)
      - name: Enforce coverage threshold (60%)
        run: |
          total=$(grep total: coverage.txt | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $total%"
          awk 'BEGIN{ if ('"$total"' < 60.0) {print "❌ Coverage below 60%"; exit 1} else {print "✅ Coverage OK"} }'

      # ✅ Subir reportes como artefacto descargable
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
            coverage.txt

      - name: Generate Swagger docs
        run: |
            go install github.com/swaggo/swag/cmd/swag@v1.8.12
            swag init -g cmd/api/main.go -o internal/http/docs

      - name: Verify Swagger docs are up to date
        run: |
          git restore coverage.out || true
          git diff --exit-code || (echo "❌ Swagger docs out of date. Run 'make swagger' and commit changes." && exit 1)
      - name: Adjust Swagger server URL for production
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          sed -i "s|localhost:8080|$SERVER_HOST|g" internal/http/docs/docs.go
  build-and-push:
    runs-on: ubuntu-latest
    needs: test  # solo corre si test pasa

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: rodrigoguerracortes
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/rodrigoguerracortes/ai-backend:latest .
          docker push ghcr.io/rodrigoguerracortes/ai-backend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to Oracle VPS (CentOS 7)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🚀 Starting deploy on VPS $(hostname)..."
            sudo systemctl start docker || true

            echo "🧩 Logging in to GHCR..."
            docker login ghcr.io -u rodrigoguerracortes -p ${{ secrets.GHCR_PAT }}

            echo "⬇️ Pulling latest image..."
            docker pull ghcr.io/rodrigoguerracortes/ai-backend:latest

            echo "🧹 Cleaning up old container..."
            docker stop ai-backend || true
            docker rm ai-backend || true

            echo "🏃 Running new container..."
            docker run -d -p 8080:8080 \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              --name ai-backend \
              --restart=always \
              ghcr.io/rodrigoguerracortes/ai-backend:latest

            echo "✅ Deployment completed!"